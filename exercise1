mystery_int = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#This is a tough one! Stick with it, you can do it!
#
#Write a program that will print the times table for the
#value given by mystery_int. The times table should print a
#two-column table of the products of every combination of
#two numbers from 1 through mystery_int. Separate consecutive
#numbers with either spaces or tabs, whichever you prefer.
#
#For example, if mystery_int is 5, this could print:
#
#1	2	3	4	5
#2	4	6	8	10
#3	6	9	12	15
#4	8	12	16	20
#5	10	15	20	25
#
#To do this, you'll want to use two nested for loops; the
#first one will print rows, and the second will print columns
#within each row.
#
#Hint: How can you print the numbers across the row without
#starting a new line each time? With what you know now, you
#could build the string for the row, but only print it once
#you've finished the row. There are other ways, but that's
#how to do it using only what we've covered so far.
#
#Hint 2: To insert a tab into a string, use the character
#sequence "\t". For example, "1\t2" will print as "1	2".
#
#Hint 3: Need to just start a new line without printing
#anything else? Just call print() with no arguments in the
#parentheses.
#
#Hint 4: If you're stuck, try first just printing out all
#the products in one flat list, each on its own line. Once
#that's working, then worry about how to organize it into
#a table.


#Add your code here!
for i in range(1, mystery_int + 1):
    row = ""
    for j in range(1, mystery_int + 1):
        row += str(i * j) + "\t"
    print(row)








mystery_string = "Lucy"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#There's an easy way to do this exercise, and a hard way. For
#a hint on the easier way, revisit the sample answers for the
#previous coding exercise.
#
#Above we've created a variable called mystery_string. Write
#some code that will print the first letter of the string on
#the first line, the first two letters on the second line,
#the first three letters on the third line, etc., until it
#prints the entire string on the last line.
#
#For example, if the string was "Lucy", then the output would
#be:
#
#L
#Lu
#Luc
#Lucy
#
#Hint: to print without automatically starting a new line,
#include the text end="" inside the print statement's
#parentheses. For example, print("Hello", end="") will print
#the word "Hello" without starting a new line afterward. So,
#calling it twice would print "HelloHello" on one line
#instead of two lines.


#Add your code here!
for i in range(1, len(mystery_string)+1):
    print(mystery_string[:i])





1| is_divisible_by_four_2(some_number):
2|     return some_number % 4 == 0
is_divisible_by_four_2 will...

never return None
 未提交 
答案
不正确:When will some_number % 4 == 0 evaluate to None? It can only ever evaluate to True or False, so one of those two will always be returned.





 1| def number_description(some_number):
 2|     result_string = "The number is "
 3|     if some_number == 0:
 4|         result_string += "zero:
 5|     else:
 6|         if some_number < 0:
 7|             result_string += "negative"
 8|         else:
 9|             result_string += "positive"
10|         result_string += " and "
11|         if result_string % 2 == 0:
12|             result_string += "even"
13|         else:
14|             result_string += "odd"
15|
number_description will...

always return None
 




#A year is considered a leap year if it abides by the
#following rules:
#
#  - Every 4th year IS a leap year, EXCEPT...
#  - Every 100th year is NOT a leap year, EXCEPT...
#  - Every 400th year IS a leap year.
#
#This starts at year 0. For example:
#
#  - 1993 is not a leap year because it is not a multiple of 4.
#  - 1996 is a leap year because it is a multiple of 4.
#  - 1900 is not a leap year because it is a multiple of 100,
#    even though it is a multiple of 4.
#  - 2000 is a leap year because it is a multiple of 400,
#    even though it is a multiple of 100.
#
#Write a function called is_leap_year. is_leap_year should
#take one parameter: year, an integer. It should return the
#boolean True if that year is a leap year, the boolean False
#if it is not.


#Write your function here!
def is_leap_year(y):
    return (y % 4 == 0) and (not (y % 100 == 0) or (y % 400 == 0))
def is_leap_year(y):
    return (y % 4 == 0) and (not (y % 100 == 0)) or ((y % 4 == 0) and (y % 400 == 0))





#Recall Coding Problem 2.4.4. In that problem, you calculated
#the damage done by an attack based on several parameters.
#
#Convert your code from there into two functions, one called
#calculate_damage and one called calculate_modifier.
#
#Your function for calculate_damage must call calculate_modifier;
#it may not calculate the modifier separately. As such,
#calculate_damage should accept all ten parameters: STAB,
#Type, Critical, Other, Random, Level, Attack, Defense, and
#Base. You'll need to pass STAB, Type, Critical, Other, and
#Random to calculate_modifier.
#
#Make sure the parameters to each function follow the order
#shown above.
#
#As a reminder, damage is calculated using this formula:
#courses.edx.org/asset-v1:GTx+CS1301xII+1T2018+type@asset+block@DamageCalc.png
#
#Modifier is calculated using this formula:
#https://studio.edx.org/asset-v1:GTx+CS1301+1T2017+type@asset+block@ModifierCalc.png


#Add your code here!



#Below are some lines of code that will test your function.
#You can change the value of the variable to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 16.0
STAB = 1
Type = 0.25
Critical = 2
Other = 1
Random = 1
Level = 50
Attack = 125
Defense = 110
Base = 60

print(calculate_damage(STAB, Type, Critical, Other, Random, Level, Attack, Defense, Base))








#-----------------------------------------------------------
#In this problem, you should write three functions:
#word_count, letter_count, and average_word_length.
#
#word_count should take as input a string. It should return
#the number of words in the string. You may assume that the
#number of words in the string will be one more than the
#number of spaces in the string.
#
#letter_count should take as input a string. It should return
#the number of letters in the string. You may assume that
#the string is only letters and spaces: no punctuation or
#numbers.
#
#average_word_length should take as input a string. It should
#return the average length of the words in the string. You
#can find the average length by dividing the number of letters
#by the number of words.
#
#Your implementation for average_word_length *must* call
#word_count and letter_count.


#Add your code here!



#Below are some lines of code that will test your function.
#You can change the value of the variable to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 3.5
a_string = "Up with the white and gold"

print(average_word_length(a_string))









#There are a lot of use cases where we want to check to see
#if a string has any invalid characters in it. For example,
#when asking for a credit card number, we want to make sure
#there are no non-numerals (although we might accept dashes
#or spaces). When asking for a name, we want to make sure
#all the characters are letters, spaces, or the occasional
#punctuation mark.
#
#Write a function called is_valid. is_valid should take two
#parameters: a string to check, and a string of all valid
#characters.
#
#is_valid should return the boolean True if all the
#characters in the string to check are present in the string
#of valid characters. It should return False if any character
#in the checked string does not appear.


#Add your code here!



#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print True, then False
sample_valid_string = "1234-5678-9011-1111"
sample_invalid_string = "1234!5678.9011?1111"
valid_characters = "0123456789-"

print(is_valid(sample_valid_string, valid_characters))
print(is_valid(sample_invalid_string, valid_characters))










#In this problem, your goal is to write a function that can
#either count all the vowels in a string or all the consonants
#in a string.
#
#Call this function count_letters. It should have two
#parameters: the string in which to search, and a boolean
#called find_consonants. If find_consonants is True, then the
#function should count consonants. If it's False, then it
#should instead count vowels.
#
#Return the number of vowels or consonants in the string
#depending on the value of find_consonants. Do not count
#any characters that are neither vowels nor consonants (e.g.
#punctuation, spaces, numbers).
#
#You may assume the string will be all lower-case letters
#(no capital letters).


#Add your code here!



#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print 14, then 7.

a_string = "up with the white and gold"

print(count_letters(a_string, True))
print(count_letters(a_string, False))






1| for i in range(2, -3, -1):    #Counts down from 2 to -2: 2, 1, 0, -1, -2
2|     try:
3|         print(2 / i)    #Prints 2 divided by the current value of i
4|     except ZeroDivisionError:
5|         print("We can't divide by 0!")

1.0
2.0
We can't divide by 0!
-2.0
-1.0

Here, the try block is inside the loop. So, when i = 0, it tries to print 2 / 0, encounters a ZeroDivisionError, and prints the message on line 5. Then, however, it keeps going with the loop because the try and except blocks were inside the loop.


1| try:
2|     for i in range(2, -3, -1):    #Counts down from 2 to -2: 2, 1, 0, -1, -2
3|         print(2 / i)    #Prints 2 divided by the current value of i
4| except ZeroDivisionError:
5|     print("We can't divide by 0!")


1.0
2.0
We can't divide by 0!

Here, the loop is inside the try block. So, when i = 0, it tries to print 2 / 0, encounters a ZeroDivisionError, and prints the message on line 5. However, that except block is outside the loop, so jumping into it ends the loop. So, it doesn't continue for the next two numbers.








try:
    #Open NumberAndLetterFile.txt in read-only mode
    input_file = open("NumberAndLetterFile.txt", mode = "r")  
    try:
        #For each line in the file
        for line in input_file:  
            #Print the line
            print(int(line)) 
    #Catch a ValueError
    except ValueError as error:    
        print("A value error occurred!")
    else:
        print("No errors occurred converting the file!")
    finally:
        #Close the file
        input_file.close()  
#Catch an IOError
except IOError as error:
    print("An error occurred reading the file!")






myother = 1
try:
    result = 10 // my_var
    print(result)
except (ZeroDivisionError, TypeError):
    print("An expected error occurred!")
else:
    print("No errors occurred!")
finally:
    print("Closing down...")
print("Done!")
______________________________________________
Closing down...
Traceback (most recent call last):
File "<string>", line 5, in <module>
NameError: name 'my_var' is not defined






cbaoa:
# This is a sample Python script.
def solution(S):
    return (True if S.rfind('a') < S.find('b') else False) if (S.find('a') != -1 and S.find('b') != -1) else True
print(solution("abaaaaaa"))





1| def add(numbers):
 2|     sum = 0
 3|     for i in range(len(numbers)):
 4|         numbers[i] = -numbers[i]
 5|         sum -= numbers[i]
 6|     return sum
 7| 
 8| my_list = [2, 4, 6, 8, 10]
 9| print(add(my_list))
10| print(add(my_list))

 1| def add(numbers):
 2|     sum = 0
 3|     for number in numbers:
 4|         number = -number
 5|         sum -= number
 6|     return sum
 7| 
 8| my_list = [2, 4, 6, 8, 10]
 9| print(add(my_list))
10| print(add(my_list))






==============================================
# Write to file
==============================================

1| string1 = "Hi!"
2| string2 = "Hey!"
3| string3 = "Hello!"
4| 
5| output_file = open("MyOutput.txt", "w")
6| output_file.write(string1)
7| output_file.write(string2)
8| output_file.write(string3)
9| output_file.close()



1| string1 = "Hi!"
2| string2 = "Hey!"
3| string3 = "Hello!"
4| 
5| output_file = open("MyOutput.txt", "w")
6| output_file.write(string1 + "\n")
7| output_file.write(string2 + "\n")
8| output_file.write(string3)
9| output_file.close()



List = ["David", "Lucy", "Ping", "Dana"]
outputFile = open("OutputFile.txt", "w")
outputFile = writelines(List)
outputFile.close()



List = ["David", "Lucy", "Ping", "Dana"]
outputFile = open("OutputFile.txt", "w")
for name in List:
    outputFile.write(name + "\n")
outputFile.close()




List = ["David", "Lucy", "Ping", "Dana"]
outputFile = open("OutputFile.txt", "w")
outputFile = write("\n".join(List))
outputFile.close()




List = ["David", "Lucy", "Ping", "Dana"]
outputFile = open("OutputFile.txt", "w")
for name in List:
    print(name, file = outputFile)
outputFile.close()

print() adds line breaks by default, so we don't need to add them manually.
Note that the fifth option is close to working -- if we added one more keyword argument, sep = "\n", then the fifth option would work, too.


